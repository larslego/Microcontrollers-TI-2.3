
OpdrachtB5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000184  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b4c  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000097f  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e5  00000000  00000000  000017a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001c88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049f  00000000  00000000  00001d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a1  00000000  00000000  000021e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002384  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e8       	ldi	r30, 0x84	; 132
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	5b d0       	rcall	.+182    	; 0x16a <main>
  b4:	65 c0       	rjmp	.+202    	; 0x180 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <switch_E>:
	PORTC = (byte<<4);
	PORTC &= ~(1<<RS);
	switch_E();
}

void set_cursor(int position) {
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	85 bb       	out	0x15, r24	; 21
  be:	8f ec       	ldi	r24, 0xCF	; 207
  c0:	97 e0       	ldi	r25, 0x07	; 7
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <switch_E+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <switch_E+0x10>
  c8:	00 00       	nop
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	87 7f       	andi	r24, 0xF7	; 247
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	8f ec       	ldi	r24, 0xCF	; 207
  d2:	97 e0       	ldi	r25, 0x07	; 7
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <switch_E+0x1c>
  d8:	00 c0       	rjmp	.+0      	; 0xda <switch_E+0x22>
  da:	00 00       	nop
  dc:	08 95       	ret

000000de <lcd_write_data>:
  de:	cf 93       	push	r28
  e0:	c8 2f       	mov	r28, r24
  e2:	85 bb       	out	0x15, r24	; 21
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	84 60       	ori	r24, 0x04	; 4
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	e6 df       	rcall	.-52     	; 0xb8 <switch_E>
  ec:	c2 95       	swap	r28
  ee:	c0 7f       	andi	r28, 0xF0	; 240
  f0:	c5 bb       	out	0x15, r28	; 21
  f2:	85 b3       	in	r24, 0x15	; 21
  f4:	84 60       	ori	r24, 0x04	; 4
  f6:	85 bb       	out	0x15, r24	; 21
  f8:	df df       	rcall	.-66     	; 0xb8 <switch_E>
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <display_text>:
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	ec 01       	movw	r28, r24
 104:	02 c0       	rjmp	.+4      	; 0x10a <display_text+0xc>
 106:	21 96       	adiw	r28, 0x01	; 1
 108:	ea df       	rcall	.-44     	; 0xde <lcd_write_data>
 10a:	88 81       	ld	r24, Y
 10c:	81 11       	cpse	r24, r1
 10e:	fb cf       	rjmp	.-10     	; 0x106 <display_text+0x8>
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <lcd_write_command>:
 116:	cf 93       	push	r28
 118:	c8 2f       	mov	r28, r24
 11a:	85 bb       	out	0x15, r24	; 21
 11c:	85 b3       	in	r24, 0x15	; 21
 11e:	8b 7f       	andi	r24, 0xFB	; 251
 120:	85 bb       	out	0x15, r24	; 21
 122:	ca df       	rcall	.-108    	; 0xb8 <switch_E>
 124:	c2 95       	swap	r28
 126:	c0 7f       	andi	r28, 0xF0	; 240
 128:	c5 bb       	out	0x15, r28	; 21
 12a:	85 b3       	in	r24, 0x15	; 21
 12c:	8b 7f       	andi	r24, 0xFB	; 251
 12e:	85 bb       	out	0x15, r24	; 21
 130:	c3 df       	rcall	.-122    	; 0xb8 <switch_E>
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <init>:
	
}

void init() {
 136:	cf 93       	push	r28
	// See table 13 from the HD44780U datasheet.
	DDRC = 0xFF;
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 13c:	15 ba       	out	0x15, r1	; 21
	
	// Step 2 Function set
	PORTC = 0x20;
 13e:	c0 e2       	ldi	r28, 0x20	; 32
 140:	c5 bb       	out	0x15, r28	; 21
	switch_E();
 142:	ba df       	rcall	.-140    	; 0xb8 <switch_E>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
	switch_E();
 144:	c5 bb       	out	0x15, r28	; 21
 146:	b8 df       	rcall	.-144    	; 0xb8 <switch_E>
	PORTC = 0x80;
 148:	80 e8       	ldi	r24, 0x80	; 128
	switch_E();
 14a:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 14c:	b5 df       	rcall	.-150    	; 0xb8 <switch_E>
	switch_E();
 14e:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
 150:	b3 df       	rcall	.-154    	; 0xb8 <switch_E>
	switch_E();
 152:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 154:	85 bb       	out	0x15, r24	; 21
	switch_E();
 156:	b0 df       	rcall	.-160    	; 0xb8 <switch_E>
	PORTC = 0x60;
 158:	15 ba       	out	0x15, r1	; 21
 15a:	ae df       	rcall	.-164    	; 0xb8 <switch_E>
	switch_E();
 15c:	80 e6       	ldi	r24, 0x60	; 96
 15e:	85 bb       	out	0x15, r24	; 21
	
	// Set cursor to position 0 on first row.
	lcd_write_command(0x02);
 160:	ab df       	rcall	.-170    	; 0xb8 <switch_E>
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	d8 df       	rcall	.-80     	; 0x116 <lcd_write_command>
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <main>:

#include "LCD/LCD.h"

int main(void)
{
	init();
 16a:	e5 df       	rcall	.-54     	; 0x136 <init>
	display_text("Joe Mama");
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	c6 df       	rcall	.-116    	; 0xfe <display_text>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	8f e1       	ldi	r24, 0x1F	; 31
 174:	9e e4       	ldi	r25, 0x4E	; 78
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <main+0xc>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x12>
 17c:	00 00       	nop
 17e:	f9 cf       	rjmp	.-14     	; 0x172 <main+0x8>

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
