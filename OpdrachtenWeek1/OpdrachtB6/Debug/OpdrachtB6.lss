
OpdrachtB6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000917  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083f  00000000  00000000  00000b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030b  00000000  00000000  0000136e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000167c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000425  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000de  00000000  00000000  00001ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001bb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	11 d0       	rcall	.+34     	; 0xbc <main>
  9a:	48 c0       	rjmp	.+144    	; 0x12c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
notes:			Busy wait, not very accurate. Make sure (external)
				clock value is set. This is used by _delay_ms inside
				util/delay.h
*******************************************************************/
{
	for (int i=0; i<ms; i++) {
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	08 c0       	rjmp	.+16     	; 0xb4 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	ef ec       	ldi	r30, 0xCF	; 207
  a6:	f7 e0       	ldi	r31, 0x07	; 7
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <wait+0xa>
  ac:	00 c0       	rjmp	.+0      	; 0xae <wait+0x10>
  ae:	00 00       	nop
  b0:	2f 5f       	subi	r18, 0xFF	; 255
  b2:	3f 4f       	sbci	r19, 0xFF	; 255
  b4:	28 17       	cp	r18, r24
  b6:	39 07       	cpc	r19, r25
  b8:	ac f3       	brlt	.-22     	; 0xa4 <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
  ba:	08 95       	ret

000000bc <main>:
inputs:			
outputs:	
notes:			Looping forever, flipping bits on PORTD
*******************************************************************/

	DDRD = 0b11111111;			// All pins PORTD are set to output 
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b00000000;			// All pins PORTC are set to input 
  c0:	14 ba       	out	0x14, r1	; 20
	
	int speed = 1;
	int count = 0;
  c2:	c0 e0       	ldi	r28, 0x00	; 0
  c4:	d0 e0       	ldi	r29, 0x00	; 0
*******************************************************************/

	DDRD = 0b11111111;			// All pins PORTD are set to output 
	DDRC = 0b00000000;			// All pins PORTC are set to input 
	
	int speed = 1;
  c6:	01 e0       	ldi	r16, 0x01	; 1
  c8:	10 e0       	ldi	r17, 0x00	; 0
	int count = 0;
	
	while (1) {
		//Button logic
		if (PINC == 0x01){
  ca:	83 b3       	in	r24, 0x13	; 19
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	59 f4       	brne	.+22     	; 0xe6 <main+0x2a>
			if (speed == 1){
  d0:	01 30       	cpi	r16, 0x01	; 1
  d2:	11 05       	cpc	r17, r1
  d4:	19 f4       	brne	.+6      	; 0xdc <main+0x20>
				speed = 4;
  d6:	04 e0       	ldi	r16, 0x04	; 4
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <main+0x24>
			} else {
				speed = 1;
  dc:	01 e0       	ldi	r16, 0x01	; 1
  de:	10 e0       	ldi	r17, 0x00	; 0
			}
			wait(200);
  e0:	88 ec       	ldi	r24, 0xC8	; 200
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	dc df       	rcall	.-72     	; 0x9e <wait>
		}
		
		//Speed logic
		if (count > speed * 1000){
  e6:	28 ee       	ldi	r18, 0xE8	; 232
  e8:	33 e0       	ldi	r19, 0x03	; 3
  ea:	02 9f       	mul	r16, r18
  ec:	c0 01       	movw	r24, r0
  ee:	03 9f       	mul	r16, r19
  f0:	90 0d       	add	r25, r0
  f2:	12 9f       	mul	r17, r18
  f4:	90 0d       	add	r25, r0
  f6:	11 24       	eor	r1, r1
  f8:	8c 17       	cp	r24, r28
  fa:	9d 07       	cpc	r25, r29
  fc:	2c f4       	brge	.+10     	; 0x108 <main+0x4c>
			PORTD  =0x80;
  fe:	80 e8       	ldi	r24, 0x80	; 128
 100:	82 bb       	out	0x12, r24	; 18
			count = 0;
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	0d c0       	rjmp	.+26     	; 0x122 <main+0x66>
		} else if (count > speed * 500){
 108:	24 ef       	ldi	r18, 0xF4	; 244
 10a:	31 e0       	ldi	r19, 0x01	; 1
 10c:	02 9f       	mul	r16, r18
 10e:	c0 01       	movw	r24, r0
 110:	03 9f       	mul	r16, r19
 112:	90 0d       	add	r25, r0
 114:	12 9f       	mul	r17, r18
 116:	90 0d       	add	r25, r0
 118:	11 24       	eor	r1, r1
 11a:	8c 17       	cp	r24, r28
 11c:	9d 07       	cpc	r25, r29
 11e:	0c f4       	brge	.+2      	; 0x122 <main+0x66>
			PORTD =0x00;
 120:	12 ba       	out	0x12, r1	; 18

		}
		
		//Delay logic
		count = count +  10;
 122:	2a 96       	adiw	r28, 0x0a	; 10
		wait(10);
 124:	8a e0       	ldi	r24, 0x0A	; 10
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	ba df       	rcall	.-140    	; 0x9e <wait>
	}
 12a:	cf cf       	rjmp	.-98     	; 0xca <main+0xe>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
